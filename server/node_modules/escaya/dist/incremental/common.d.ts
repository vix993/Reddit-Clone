import { Context, ParserState } from '../common';
import { RootNode } from '../ast/root-node';
import { TextChangeRange, TextSpan } from '../types';
import { IdentifierReference } from '../ast/expressions/identifierreference';
import { DiagnosticCode } from '../diagnostic/diagnostic-code';
export declare function createIdentifier(state: ParserState, context: Context, code?: DiagnosticCode): IdentifierReference;
export declare function createBindingIdentifier(state: ParserState, context: Context, code: DiagnosticCode, shouldConsume?: boolean): IdentifierReference;
export declare function extendToAffectedRange(root: RootNode, changeRange: TextChangeRange): TextChangeRange;
export declare function nodeIsMissing(node: any): boolean;
export declare function nodeIsPresent(node: Node): boolean;
export declare function createTextSpanFromBounds(start: number, end: number): TextSpan;
export declare function textSpanEnd(span: TextSpan): number;
export declare function createTextChangeRange(span: TextSpan, newLength: number): TextChangeRange;
export declare function createTextSpan(start: number, length: number): TextSpan;
export declare function textChangeRangeNewSpan(range: TextChangeRange): TextSpan;
export declare function setParentReferences(root: RootNode): RootNode;
export declare function updateTokenPositionsAndMarkElements(sourceFile: RootNode, changeStart: number, changeRangeOldEnd: number, changeRangeNewEnd: number, delta: number): any;
export declare function moveElementEntirelyPastChangeRange(element: any, isArray: boolean, delta: number): void;
//# sourceMappingURL=common.d.ts.map