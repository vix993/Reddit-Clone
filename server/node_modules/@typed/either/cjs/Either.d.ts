import { Left } from './Left';
import { Right } from './Right';
/**
 * Either data structure. Extremely useful for handling errors or different
 * logic paths without the use of if-statements.
 * @name Either
 * @type
 */
export declare type Either<A, B> = Left<A> | Right<B>;
export declare namespace Either {
    /**
     * Creates an Either<A, B> that is of type Right<B>
     * @name Either.of<A>(value: A): Either<B, A>
     */
    const of: <A = unknown, B = unknown>(value: B) => Either<A, B>;
    /**
     * Creates an Either<A, B> that is of type Left<A>
     * @name Either.left<A>(value: A): Either<A, B>
     */
    const left: <A, B = unknown>(value: A) => Either<A, B>;
}
/**
 * Returns true if an Either<A, B> is type Left<A>
 * @name isLeft<A, B>(either: Either<A, B>): Either is Left<A>
 */
export declare function isLeft<A, B>(either: Either<A, B>): either is Left<A>;
/**
 * Returns true if an Either<A, B> is type Right<B>
 * @name isRight<A, B>(either: Either<A, B>): either is Right<B>
 */
export declare function isRight<A, B>(either: Either<A, B>): either is Right<B>;
//# sourceMappingURL=Either.d.ts.map