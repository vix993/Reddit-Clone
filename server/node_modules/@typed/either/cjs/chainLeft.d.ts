import { Either } from './Either';
/**
 * Returns a `Either` that is the result of calling `f` with the rejected
 * value of another `Either`.
 * @name chainLeft<A, B, C>(f: (value: B) => Either<C, B>, either: Either<A, B>): Either<A C>
 */
export declare const chainLeft: {
    <A, B, C>(f: (value: A) => Either<C, B>, either: Either<A, B>): Either<C, B>;
    <A_1, B_1, C_1>(f: (value: A_1) => Either<C_1, B_1>): (either: Either<A_1, B_1>) => Either<C_1, B_1>;
};
//# sourceMappingURL=chainLeft.d.ts.map