import { Either } from './Either';
import { Arity1 } from '@typed/lambda';
/**
 * Extracts the value from an `Either` applying function `f` if the `Either<A, B>` is
 * `Left<A>` or function `g` if `Right<B>`.
 * @name unpack<A, B, C>(f: Arity1<A, C>, g: Arity1<B, C>, either: Either<A, B>): C
 */
export declare const unpack: {
    <A, B, C>(f: Arity1<A, C>, g: Arity1<B, C>, either: Either<A, B>): C;
    <A_1, B_1, C_1>(f: Arity1<A_1, C_1>, g: Arity1<B_1, C_1>): (either: Either<A_1, B_1>) => C_1;
    <A_2, B_2, C_2>(f: Arity1<A_2, C_2>): UnpackArity2A<A_2, B_2, C_2>;
    <A_3, C_3>(f: Arity1<A_3, C_3>): UnpackArity2B<A_3, C_3>;
};
export declare type UnpackArity2A<A, B, C> = {
    (g: Arity1<B, C>, either: Either<A, B>): C;
    (g: Arity1<B, C>): (either: Either<A, B>) => C;
};
export declare type UnpackArity2B<A, C> = {
    <B>(g: Arity1<B, C>, either: Either<A, B>): C;
    <B>(g: Arity1<B, C>): (either: Either<A, B>) => C;
};
//# sourceMappingURL=unpack.d.ts.map