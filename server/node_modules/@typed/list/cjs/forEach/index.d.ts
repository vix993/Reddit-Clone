import { Arity2 } from '@typed/lambda';
export declare type ArrayLikeValue<A> = A extends ArrayLike<infer R> ? R : never;
/**
 * Perform a side-effect on every value in an array like. Returns the
 * array-like passed in.
 * @param f :: (a -> number -> *)
 * @param list :: [a]
 * @returns :: [a]
 */
export declare const forEach: {
    <R, A extends ArrayLike<R>>(f: Arity2<R, number, void>, list: A): A;
    <R_1>(f: Arity2<R_1, number, void>): <A_1 extends ArrayLike<R_1>>(list: A_1) => A_1;
};
//# sourceMappingURL=index.d.ts.map