import { Arity1 } from '@typed/lambda';
/**
 * Order a list into groups and subgroups
 * @param sortFns :: [(a -> PropertyKey)]
 * @param list :: [a]
 * @returns :: [a]
 */
export declare const multiSort: {
    <A>(sortFns: Arity1<A, PropertyKey>[], list: ReadonlyArray<A>): A[];
    <A>(sortFns: Arity1<A, PropertyKey>[]): (list: ReadonlyArray<A>) => A[];
};
export declare const enum SortOrder {
    Ascending = 0,
    Descending = 1
}
export declare const multiSortWithOrder: {
    <A>(order: SortOrder, sortFns: Arity1<A, PropertyKey>[], list: ReadonlyArray<A>): A[];
    <A>(order: SortOrder, sortFns: Arity1<A, PropertyKey>[]): (list: ReadonlyArray<A>) => A[];
    (order: SortOrder): {
        <A>(sortFns: Arity1<A, PropertyKey>[], list: ReadonlyArray<A>): A[];
        <A>(sortFns: Arity1<A, PropertyKey>[]): (list: ReadonlyArray<A>) => A[];
    };
};
//# sourceMappingURL=multiSort.d.ts.map