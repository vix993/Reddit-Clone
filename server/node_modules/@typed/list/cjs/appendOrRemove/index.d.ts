/**
 * Append a value to a list if it does not exist or remove if it does exist.
 * Useful for toggling things on/off.
 *
 * @param item :: a
 * @param items :: [a]
 * @returns :: [a]
 */
export declare const appendOrRemove: {
    <A>(item: A, items: readonly A[]): A[];
    <A_1>(item: A_1): (items: readonly A_1[]) => A_1[];
};
/**
 * Append a value to a list if it does not exist or remove if it does exist.
 * Allows providing a custom comparison function.
 *
 * @param item :: a
 * @param items :: [a]
 * @param comparison :: (a -> b)
 * @returns :: [a]
 */
export declare const appendOrRemoveBy: {
    <A, B = A>(item: A, items: readonly A[], comparison: (value: A) => B): A[];
    <A_1>(item: A_1, items: readonly A_1[]): <B_1 = A_1>(comparison: (value: A_1) => B_1) => A_1[];
    <A_2>(item: A_2): {
        <B_2 = A_2>(items: readonly A_2[], comparison: (value: A_2) => B_2): A_2[];
        (items: readonly A_2[]): <B_3 = A_2>(comparison: (value: A_2) => B_3) => A_2[];
    };
};
//# sourceMappingURL=index.d.ts.map