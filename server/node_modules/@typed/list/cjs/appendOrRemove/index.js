"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.appendOrRemoveBy = exports.appendOrRemove = void 0;
const lambda_1 = require("@typed/lambda");
const maybe_1 = require("@typed/maybe");
const append_1 = require("../append/append");
const findIndex_1 = require("../findIndex");
const remove_1 = require("../remove");
/**
 * Append a value to a list if it does not exist or remove if it does exist.
 * Useful for toggling things on/off.
 *
 * @param item :: a
 * @param items :: [a]
 * @returns :: [a]
 */
exports.appendOrRemove = lambda_1.curry((item, items) => __appendOrRemove(item, items, lambda_1.id));
/**
 * Append a value to a list if it does not exist or remove if it does exist.
 * Allows providing a custom comparison function.
 *
 * @param item :: a
 * @param items :: [a]
 * @param comparison :: (a -> b)
 * @returns :: [a]
 */
exports.appendOrRemoveBy = lambda_1.curry(__appendOrRemove);
function __appendOrRemove(item, items, comparison) {
    const b = comparison(item);
    const index = findIndex_1.findIndex((a) => comparison(a) === b, items);
    if (maybe_1.isNothing(index)) {
        return append_1.append(item, items);
    }
    return remove_1.remove(maybe_1.fromJust(index), 1, items);
}
//# sourceMappingURL=index.js.map