import { Predicate2 } from '@typed/lambda';
import { Maybe } from '@typed/maybe';
/**
 * Flatten a list of maybes into a list of values.
 * @param :: [Maybe a]
 * @returns :: [a]
 */
export declare const filterMaybes: <A>(list: readonly Maybe<A>[]) => A[];
/**
 * Filter a list using a maybe value. Returns the list unchanged if maybe is Nothing.
 * @param predicate :: (a -> b -> boolean)
 * @param maybe :: Maybe a
 * @param list :: [b]
 * @returns :: [b]
 */
export declare const maybeFilter: {
    <A, B>(predicate: Predicate2<A, B>, maybe: Maybe<A>, list: ReadonlyArray<B>): B[];
    <A, B>(predicate: Predicate2<A, B>, maybe: Maybe<A>): (list: ReadonlyArray<B>) => B[];
    <A, B>(predicate: Predicate2<A, B>): {
        (maybe: Maybe<A>, list: ReadonlyArray<B>): B[];
        (maybe: Maybe<A>): (list: ReadonlyArray<B>) => B[];
    };
};
//# sourceMappingURL=filterMaybes.d.ts.map