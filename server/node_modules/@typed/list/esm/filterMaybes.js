import { curry } from '@typed/lambda';
import { fromJust, isJust, isNothing } from '@typed/maybe';
/**
 * Flatten a list of maybes into a list of values.
 * @param :: [Maybe a]
 * @returns :: [a]
 */
export const filterMaybes = (list) => list.filter(isJust).map(fromJust);
/**
 * Filter a list using a maybe value. Returns the list unchanged if maybe is Nothing.
 * @param predicate :: (a -> b -> boolean)
 * @param maybe :: Maybe a
 * @param list :: [b]
 * @returns :: [b]
 */
export const maybeFilter = curry((predicate, maybe, list) => {
    if (isNothing(maybe)) {
        return list.slice();
    }
    const a = fromJust(maybe);
    return list.filter((b) => predicate(a, b));
});
//# sourceMappingURL=filterMaybes.js.map