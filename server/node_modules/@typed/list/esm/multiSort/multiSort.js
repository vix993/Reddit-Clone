import { curry, id } from '@typed/lambda';
import { ascend } from '../ascend';
import { chain } from '../chain';
import { descend } from '../descend';
import { groupBy } from '../groupBy';
/**
 * Order a list into groups and subgroups
 * @param sortFns :: [(a -> PropertyKey)]
 * @param list :: [a]
 * @returns :: [a]
 */
export const multiSort = curry(function multiSort(sortFns, list) {
    return multiSortWithOrder(0 /* Ascending */, sortFns, list);
});
export var SortOrder;
(function (SortOrder) {
    SortOrder[SortOrder["Ascending"] = 0] = "Ascending";
    SortOrder[SortOrder["Descending"] = 1] = "Descending";
})(SortOrder || (SortOrder = {}));
export const multiSortWithOrder = curry(function multiSortWithOrder(order, sortFns, list) {
    if (sortFns.length === 0 || list.length === 0) {
        return list.slice();
    }
    const sort = order === 0 /* Ascending */ ? ascend : descend;
    const initialObject = groupBy(sortFns[0], list);
    const initialKeys = Object.keys(initialObject).sort(sort(id));
    const innerSortFns = sortFns.slice(1);
    const result = initialKeys.reduce((acc, key) => {
        acc[key] = multiSortWithOrder(order, innerSortFns, initialObject[key]);
        return acc;
    }, {});
    return chain((x) => result[x], initialKeys);
});
//# sourceMappingURL=multiSort.js.map