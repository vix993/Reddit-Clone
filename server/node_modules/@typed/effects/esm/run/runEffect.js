import { Resume } from '@typed/env';
import { Failure } from '../failures/Failure';
export const runEffect = (effect) => (c) => {
    const generator = effect[Symbol.iterator]();
    return runEffectGenerator(generator, generator.next(), c);
};
const nextResult = (value, generator) => {
    if (value instanceof Failure) {
        return value.unpack((e) => generator.throw(e), (a) => generator.return(a));
    }
    return generator.next(value);
};
const runEffectGenerator = (generator, result, capabilities) => {
    while (!result.done) {
        const resume = result.value(capabilities);
        if (resume.type === 'lazy') {
            return Resume.chain((value) => runEffectGenerator(generator, nextResult(value, generator), capabilities), resume);
        }
        result = nextResult(resume.value, generator);
    }
    return Resume.of(result.value);
};
//# sourceMappingURL=runEffect.js.map