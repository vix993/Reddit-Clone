import { IO } from '@typed/lambda';
import { Resume } from './Resume';
/**
 * A computation that has all capabilities supplied
 */
export interface Pure<A> {
    <C>(capabilities: C): Resume<A>;
}
/**
 * Generic type for computations that depend on capabilities
 * from the environment.
 */
export interface Env<C, A> {
    (capabilities: C): Resume<A>;
}
/**
 * Extracts the capabilities required to satisfy an environment
 */
export declare type CapabilitiesOf<A> = A extends Env<infer R, any> ? R : never;
/**
 * Get the return value of an Env
 */
export declare type ValueOf<A> = A extends Env<any, infer R> ? R : A extends Pure<infer R> ? R : never;
export declare namespace Pure {
    const of: <A>(value: A) => Pure<A>;
    const fromIO: <A>(io: IO<A>) => Pure<A>;
}
//# sourceMappingURL=Env.d.ts.map