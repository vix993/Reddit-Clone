import { Disposable } from '@typed/disposable';
export declare type Resume<A> = ValueResume<A> | LazyResume<A>;
export declare type ValueResume<A> = {
    readonly type: 'value';
    readonly value: A;
};
export declare type LazyResume<A> = {
    readonly type: 'lazy';
    readonly resume: (cb: (value: A) => Disposable) => Disposable;
};
export declare namespace Resume {
    const of: <A>(value: A) => Resume<A>;
    const create: <A>(resume: (cb: (value: A) => Disposable) => Disposable) => Resume<A>;
    const run: <A>(f: (value: A) => Disposable, resume: Resume<A>) => Disposable;
    const chain: <A, B>(fn: (value: A) => Resume<B>, resume: Resume<A>) => Resume<B>;
    const isValue: <A>(resume: Resume<A>) => resume is ValueResume<A>;
    const isLazy: <A>(resume: Resume<A>) => resume is LazyResume<A>;
}
//# sourceMappingURL=Resume.d.ts.map