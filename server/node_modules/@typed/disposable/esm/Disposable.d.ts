import { Arity1 } from '@typed/lambda';
/**
 * Generic type for cleaning up resources
 */
export interface Disposable {
    readonly dispose: () => void;
}
export interface LazyDisposable extends Disposable {
    readonly disposed: boolean;
    readonly addDisposable: Arity1<Disposable, Disposable>;
}
/**
 * Cleanup a disposable
 * @param disposable :: Disposable
 */
export declare const dispose: (disposable: Disposable) => void;
export declare namespace Disposable {
    /**
     * Empty Disposable
     */
    const None: {
        dispose: () => void;
    };
    /**
     * Create a disposable that is lazily created
     */
    const lazy: () => LazyDisposable;
}
export declare const withIsDisposed: (fn: (isDisposed: () => boolean) => void) => Disposable;
export declare function onDisposed<A>(fn: (error?: A) => void, disposable: Disposable): Disposable;
//# sourceMappingURL=Disposable.d.ts.map