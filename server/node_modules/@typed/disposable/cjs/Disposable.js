"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.onDisposed = exports.withIsDisposed = exports.Disposable = exports.dispose = void 0;
const lambda_1 = require("@typed/lambda");
/**
 * Cleanup a disposable
 * @param disposable :: Disposable
 */
exports.dispose = (disposable) => disposable.dispose();
var Disposable;
(function (Disposable) {
    /**
     * Empty Disposable
     */
    Disposable.None = { dispose: lambda_1.noOp };
    /**
     * Create a disposable that is lazily created
     */
    Disposable.lazy = () => {
        let isDisposed = false;
        const disposables = new Set();
        const removeDisposable = (disposable) => disposables.delete(disposable);
        return {
            get disposed() {
                return isDisposed;
            },
            addDisposable(disposable) {
                if (disposable === Disposable.None) {
                    return disposable;
                }
                if (isDisposed) {
                    disposable.dispose();
                    return Disposable.None;
                }
                const dispose = () => removeDisposable(disposable);
                disposables.add(onDisposed(dispose, disposable));
                return {
                    dispose,
                };
            },
            dispose() {
                if (isDisposed) {
                    return;
                }
                isDisposed = true;
                disposables.forEach(exports.dispose);
                disposables.clear();
            },
        };
    };
})(Disposable = exports.Disposable || (exports.Disposable = {}));
// Useful when you have a non-cancellable (like promises) async process you want to be able to short circuit
exports.withIsDisposed = (fn) => {
    let disposed = false;
    const isDisposed = () => disposed;
    fn(isDisposed);
    return {
        dispose: () => {
            disposed = true;
        },
    };
};
function onDisposed(fn, disposable) {
    return {
        dispose: () => {
            try {
                disposable.dispose();
                fn();
            }
            catch (error) {
                fn(error);
            }
        },
    };
}
exports.onDisposed = onDisposed;
//# sourceMappingURL=Disposable.js.map