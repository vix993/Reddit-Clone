import { Just } from './Just';
import { Nothing } from './Nothing';
export declare type Maybe<A> = Just<A> | Nothing;
export declare type MaybeOf<A> = {
    [K in keyof A]: Maybe<A[K]>;
};
export declare type MaybeValue<A extends Maybe<any>> = A extends Maybe<infer R> ? R : never;
export declare namespace Maybe {
    /**
     * Creates a Maybe containing a value. If the value is `undefined` or `null`
     * a `Nothing` will be returned. All other values will be wrapped in a `Just`.
     * @name Maybe.of<A>(value: A): Maybe<A>
     */
    const of: <A>(value: void | A | null | undefined) => Maybe<A>;
    const fromString: (str: string | null | undefined | void) => Maybe<string>;
}
//# sourceMappingURL=Maybe.d.ts.map