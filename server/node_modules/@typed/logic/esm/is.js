import { isFunction, isMap, isSet } from '@typed/common';
import { pipe2 } from '@typed/lambda';
import { all } from './all';
import { complement } from './complement';
import { equals } from './equals';
import { not } from './not';
import { or } from './or';
export { isFunction, isMap, isSet };
export const is = (value) => equals(value);
export const isNot = (a) => pipe2(is(a), not);
export const isAndIsNot = (value) => [is(value), isNot(value)];
export const isNotFunction = complement(isFunction);
export const isNotMap = complement(isMap);
export const isNotSet = complement(isSet);
export const [isUndefined, isNotUndefined] = isAndIsNot(undefined);
export const [isNull, isNotNull] = isAndIsNot(null);
export function isArray(x) {
    return Array.isArray(x);
}
export const isNotArray = pipe2(isArray, not);
export function isIterator(x) {
    return x && isFunction(x.next);
}
export const isNotIterator = complement(isIterable);
export function isIterable(x) {
    return x && isFunction(x[Symbol.iterator]);
}
export const isNotIterable = complement(isIterable);
export const isGenerator = (x) => {
    return (isIterable(x) &&
        isFunction(x.next) &&
        isFunction(x.return) &&
        isFunction(x.throw));
};
export const isNotGenerator = complement(isGenerator);
export const isArrayLike = (x) => {
    if (isArray(x)) {
        return true;
    }
    if (!x || !isObject(x) || !isString(x)) {
        return false;
    }
    const asObj = x;
    if (asObj.length === 0) {
        return true;
    }
    if (asObj.length > 0) {
        return (Object.prototype.hasOwnProperty.call(x, 0) &&
            Object.prototype.hasOwnProperty.call(x, asObj.length - 1));
    }
    return false;
};
export const isNotArrayLike = complement(isArrayLike);
export const isNumber = (u) => typeof u === 'number' && !Number.isNaN(u);
export const isNotNumber = complement(isNumber);
export const isString = (u) => typeof u === 'string';
export const isNotString = complement(isString);
export const isObject = (u) => typeof u === 'object';
export const isNotObject = complement(isObject);
export const isRecord = (u) => u && isObject(u) && isNotArrayLike(u) && isNotMap(u) && isNotSet(u);
export const isNotRecord = complement(isRecord);
export const isPromiseLike = (x) => x && isObject(x) && isFunction(x.then);
export const isNotPromiseLie = complement(isPromiseLike);
export const [isTrue, isNotTrue] = isAndIsNot(true);
export const [isFalse, isNotFalse] = isAndIsNot(false);
export const isBoolean = or(isTrue, isFalse);
export const isNotBoolean = complement(isBoolean);
export const isJsonArray = function isJsonArray(x) {
    return isArray(x) && all(isJson, x);
};
export const isNotJsonArray = complement(isJsonArray);
export const isJsonObject = function isJsonObject(x) {
    return (!isArray(x) && isObject(x) && all(isString, Object.keys(x)) && all(isJson, Object.values(x)));
};
export const isNotJsonObject = complement(isJsonObject);
export const isJsonPrimitive = or(isString, or(isNumber, or(isBoolean, isNull)));
export const isNotJsonPrimitive = complement(isJsonPrimitive);
export const isJson = or(isJsonPrimitive, or(isJsonArray, isJsonObject));
export const isNotJson = complement(isJson);
export const isDate = (u) => u instanceof Date;
export const isNotDate = complement(isDate);
//# sourceMappingURL=is.js.map