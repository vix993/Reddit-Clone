import { Is, Predicate } from '@typed/lambda';
/**
 * Returns true if both predicates return true.
 * @param predicate1 :: (a -> boolean)
 * @param predicate2 :: (a -> boolean)
 * @param value :: a
 * @returns :: boolean
 */
export declare const and: {
    <A, B>(predicate1: Is<A>, predicate2: Is<B>, value: unknown): value is A & B;
    <A, B>(predicate1: Is<A>, predicate2: Is<B>): (value: unknown) => value is A & B;
    <A>(predicate1: Is<A>): {
        <B>(predicate2: Is<B>, value: unknown): value is A & B;
        <B>(predicate2: Is<B>): (value: unknown) => value is A & B;
    };
    <A>(predicate1: Predicate<A>, predicate2: Predicate<A>, value: A): boolean;
    <A>(predicate1: Predicate<A>, predicate2: Predicate<A>): Predicate<A>;
    <A>(predicate1: Predicate<A>): {
        (predicate2: Predicate<A>, value: A): boolean;
        (predicate2: Predicate<A>): Predicate<A>;
    };
};
//# sourceMappingURL=and.d.ts.map