import { Json, JsonPrimitive } from '@typed/common';
export declare type JsonSerializable = JsonPrimitive | ReadonlyArray<JsonSerializable> | JsonSerializableRecord | ReadonlyMap<JsonSerializable, JsonSerializable> | ReadonlySet<JsonSerializable>;
export interface JsonSerializableRecord extends Record<string, JsonSerializable> {
}
export declare const jsonReplace: (serializable: JsonSerializable) => Json;
export declare const jsonRevive: (json: Json) => JsonSerializable;
export declare function fromJson(jsonString: string): JsonSerializable;
export declare function toJson<A extends JsonSerializable>(x: A, space?: string | number): string;
//# sourceMappingURL=json.d.ts.map